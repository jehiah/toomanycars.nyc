package data

import (
	"encoding/json"
	"io"
	"log"
	"os"

	"github.com/paulmach/orb/geojson"
	"github.com/paulmach/orb/planar"
)

type Garage struct {
	Type             string            `json:"type"`
	Geometry         *geojson.Geometry `json:"geometry"`
	GarageProperties `json:"properties"`
}
type GarageProperties struct {
	DoittID   string  `json:"doitt_id"`
	Bin       string  `json:"bin"`
	FeatCode  string  `json:"feat_code"`
	ShapeArea float64 `json:"shape_area"`
}
type Garages []*Garage

func (g *Garage) UnmarshalJSON(b []byte) error {
	type tempType struct {
		Type             string            `json:"type"`
		Geometry         *geojson.Geometry `json:"geometry"`
		GarageProperties json.RawMessage   `json:"properties"`
	}
	var data tempType
	err := json.Unmarshal(b, &data)
	if err != nil {
		return err
	}
	if g == nil {
		g = &Garage{}
	}
	(*g).Type = data.Type
	(*g).Geometry = data.Geometry
	return json.Unmarshal(data.GarageProperties, &g.GarageProperties)
}

func (g *GarageProperties) UnmarshalJSON(b []byte) error {
	type localType GarageProperties
	type tempType struct {
		ShapeArea StrFloat64 `json:"shape_area"`
		localType
	}
	var data tempType
	err := json.Unmarshal(b, &data)
	if err != nil {
		return err
	}
	if g == nil {
		g = &GarageProperties{}
	}
	*g = GarageProperties(data.localType)
	g.ShapeArea = float64(data.ShapeArea)
	return nil
}

func (p Garages) Filter(b Borough) Garages {
	var o Garages
Loop:
	for _, pp := range p {
		center := pp.Geometry.Geometry().Bound().Center()
		for _, subshape := range b.Polygon {
			if planar.PolygonContains(subshape, center) {
				// log.Printf("%s[%d] contains %s at %#v", b.Name, i, pp.ID, center)
				o = append(o, pp)
				continue Loop
			}
		}
		// log.Printf("%s not contained in %s", pp.ID, b.Name)
	}
	return o
}

func (g Garages) SurfaceArea() (total float64) {
	for _, gg := range g {
		total += gg.ShapeArea
	}
	return
}

func (g Garages) EstimateSpaces() (spaces int) {
	for _, gg := range g {
		spaces += gg.EstimateSpaces()
	}
	return
}

// EstimateSpaces estimates the number of garage spaces based on the size of the garage
// $ cat data/DOITT_planimetrics_building_garages.json | jq -r -c '.[] | .shape_area' | histogram.py -x 600 -m 100 -b 100
// # NumSamples = 215375; Min = 100.00; Max = 600.00
// # 11536 values outside of min/max
// # Mean = 361.575112; Variance = 2017311.723772; SD = 1420.320993; Median 308.189895
// # each ∎ represents a count of 69
//   100.0000 -   105.0000 [    32]:
//   105.0000 -   110.0000 [    24]:
//   110.0000 -   115.0000 [    37]:
//   115.0000 -   120.0000 [    33]:
//   120.0000 -   125.0000 [    59]:
//   125.0000 -   130.0000 [    56]:
//   130.0000 -   135.0000 [    73]: ∎
//   135.0000 -   140.0000 [    90]: ∎
//   140.0000 -   145.0000 [   245]: ∎∎∎
//   145.0000 -   150.0000 [   931]: ∎∎∎∎∎∎∎∎∎∎∎∎∎
//   150.0000 -   155.0000 [  1096]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   155.0000 -   160.0000 [  1269]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   160.0000 -   165.0000 [  1518]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   165.0000 -   170.0000 [  1759]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   170.0000 -   175.0000 [  2037]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   175.0000 -   180.0000 [  2236]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   180.0000 -   185.0000 [  2495]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   185.0000 -   190.0000 [  2617]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   190.0000 -   195.0000 [  2743]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   195.0000 -   200.0000 [  2707]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   200.0000 -   205.0000 [  5186]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   205.0000 -   210.0000 [  5158]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   210.0000 -   215.0000 [  5054]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   215.0000 -   220.0000 [  4899]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   220.0000 -   225.0000 [  4821]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   225.0000 -   230.0000 [  4683]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   230.0000 -   235.0000 [  4533]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   235.0000 -   240.0000 [  4311]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   240.0000 -   245.0000 [  4301]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   245.0000 -   250.0000 [  4258]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   250.0000 -   255.0000 [  4057]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   255.0000 -   260.0000 [  3949]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   260.0000 -   265.0000 [  3635]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   265.0000 -   270.0000 [  3542]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   270.0000 -   275.0000 [  3384]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   275.0000 -   280.0000 [  3217]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   280.0000 -   285.0000 [  2980]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   285.0000 -   290.0000 [  2875]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎ <--- 2car cutoff
//   290.0000 -   295.0000 [  2885]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   295.0000 -   300.0000 [  2844]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   300.0000 -   305.0000 [  2909]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   305.0000 -   310.0000 [  2942]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   310.0000 -   315.0000 [  2943]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   315.0000 -   320.0000 [  3061]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   320.0000 -   325.0000 [  3034]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   325.0000 -   330.0000 [  3133]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   330.0000 -   335.0000 [  3327]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   335.0000 -   340.0000 [  3095]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   340.0000 -   345.0000 [  3092]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   345.0000 -   350.0000 [  3063]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   350.0000 -   355.0000 [  3131]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   355.0000 -   360.0000 [  3089]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   360.0000 -   365.0000 [  2992]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   365.0000 -   370.0000 [  2956]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   370.0000 -   375.0000 [  2900]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   375.0000 -   380.0000 [  2795]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   380.0000 -   385.0000 [  2801]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   385.0000 -   390.0000 [  2638]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   390.0000 -   395.0000 [  2569]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   395.0000 -   400.0000 [  2452]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   400.0000 -   405.0000 [  2246]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   405.0000 -   410.0000 [  2245]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   410.0000 -   415.0000 [  2170]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   415.0000 -   420.0000 [  2050]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   420.0000 -   425.0000 [  2055]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   425.0000 -   430.0000 [  1921]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   430.0000 -   435.0000 [  1807]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   435.0000 -   440.0000 [  1833]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   440.0000 -   445.0000 [  1693]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   445.0000 -   450.0000 [  1666]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   450.0000 -   455.0000 [  1552]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   455.0000 -   460.0000 [  1401]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   460.0000 -   465.0000 [  1371]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   465.0000 -   470.0000 [  1328]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   470.0000 -   475.0000 [  1177]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎ <--- 3car cutoff
//   475.0000 -   480.0000 [  1146]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   480.0000 -   485.0000 [  1072]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   485.0000 -   490.0000 [  1003]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   490.0000 -   495.0000 [   979]: ∎∎∎∎∎∎∎∎∎∎∎∎∎∎
//   495.0000 -   500.0000 [   853]: ∎∎∎∎∎∎∎∎∎∎∎∎
//   500.0000 -   505.0000 [   854]: ∎∎∎∎∎∎∎∎∎∎∎∎
//   505.0000 -   510.0000 [   810]: ∎∎∎∎∎∎∎∎∎∎∎
//   510.0000 -   515.0000 [   740]: ∎∎∎∎∎∎∎∎∎∎
//   515.0000 -   520.0000 [   696]: ∎∎∎∎∎∎∎∎∎∎
//   520.0000 -   525.0000 [   699]: ∎∎∎∎∎∎∎∎∎∎
//   525.0000 -   530.0000 [   607]: ∎∎∎∎∎∎∎∎
//   530.0000 -   535.0000 [   634]: ∎∎∎∎∎∎∎∎∎
//   535.0000 -   540.0000 [   571]: ∎∎∎∎∎∎∎∎
//   540.0000 -   545.0000 [   542]: ∎∎∎∎∎∎∎
//   545.0000 -   550.0000 [   514]: ∎∎∎∎∎∎∎
//   550.0000 -   555.0000 [   518]: ∎∎∎∎∎∎∎
//   555.0000 -   560.0000 [   443]: ∎∎∎∎∎∎
//   560.0000 -   565.0000 [   472]: ∎∎∎∎∎∎
//   565.0000 -   570.0000 [   403]: ∎∎∎∎∎
//   570.0000 -   575.0000 [   407]: ∎∎∎∎∎
//   575.0000 -   580.0000 [   371]: ∎∎∎∎∎
//   580.0000 -   585.0000 [   370]: ∎∎∎∎∎
//   585.0000 -   590.0000 [   377]: ∎∎∎∎∎
//   590.0000 -   595.0000 [   365]: ∎∎∎∎∎
//   595.0000 -   600.0000 [   327]: ∎∎∎∎ <- 4 car cutoff
func (g Garage) EstimateSpaces() int {
	switch {
	case g.ShapeArea < 285:
		return 1
	case g.ShapeArea < 470:
		return 2
	case g.ShapeArea < 600:
		return 3
	default:
		return 4
	}
}

func ParseDOITTGarages(r io.Reader) (Garages, error) {
	type FeatureCollection struct {
		Features []*Garage `json:"features"`
	}
	var o FeatureCollection
	err := json.NewDecoder(r).Decode(&o)
	if err != nil {
		return nil, err
	}
	log.Printf("Garage: %d shapes loaded", len(o.Features))
	return o.Features, nil
}

func ParseDOITTGaragesFromFile(file string) (Garages, error) {
	f, err := os.Open(file)
	if err != nil {
		return nil, err
	}
	defer f.Close()
	return ParseDOITTGarages(f)
}
